// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/menu.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "menu";

/** empty message */
export interface Empty {
}

export interface RestaurantId {
  restaurantId: string;
}

export interface UpdateMenuStatusRequest {
  menuId: string;
  available: boolean;
}

export interface MenuId {
  menuId: string;
}

export interface NameRequest {
  name: string;
}

export interface Menu {
  menuId: string;
  restaurantId: string;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
  available: boolean;
}

export interface CreateMenuRequest {
  restaurantId: string;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
  available: boolean;
}

export interface UpdateMenuRequest {
  menuId: string;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
  available: boolean;
}

export interface MenuList {
  menus: Menu[];
}

export const MENU_PACKAGE_NAME = "menu";

export interface MenuServiceClient {
  createMenu(request: CreateMenuRequest): Observable<Menu>;

  getMenuById(request: MenuId): Observable<Menu>;

  getMenusByRestaurantId(request: RestaurantId): Observable<MenuList>;

  getMenusByName(request: NameRequest): Observable<MenuList>;

  updateMenu(request: UpdateMenuRequest): Observable<Menu>;

  updateMenuStatus(request: UpdateMenuStatusRequest): Observable<Menu>;

  deleteMenu(request: MenuId): Observable<Empty>;

  getAllMenus(request: Empty): Observable<MenuList>;

  getAllValidMenus(request: Empty): Observable<MenuList>;
}

export interface MenuServiceController {
  createMenu(request: CreateMenuRequest): Promise<Menu> | Observable<Menu> | Menu;

  getMenuById(request: MenuId): Promise<Menu> | Observable<Menu> | Menu;

  getMenusByRestaurantId(request: RestaurantId): Promise<MenuList> | Observable<MenuList> | MenuList;

  getMenusByName(request: NameRequest): Promise<MenuList> | Observable<MenuList> | MenuList;

  updateMenu(request: UpdateMenuRequest): Promise<Menu> | Observable<Menu> | Menu;

  updateMenuStatus(request: UpdateMenuStatusRequest): Promise<Menu> | Observable<Menu> | Menu;

  deleteMenu(request: MenuId): Promise<Empty> | Observable<Empty> | Empty;

  getAllMenus(request: Empty): Promise<MenuList> | Observable<MenuList> | MenuList;

  getAllValidMenus(request: Empty): Promise<MenuList> | Observable<MenuList> | MenuList;
}

export function MenuServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createMenu",
      "getMenuById",
      "getMenusByRestaurantId",
      "getMenusByName",
      "updateMenu",
      "updateMenuStatus",
      "deleteMenu",
      "getAllMenus",
      "getAllValidMenus",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("MenuService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("MenuService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const MENU_SERVICE_NAME = "MenuService";
