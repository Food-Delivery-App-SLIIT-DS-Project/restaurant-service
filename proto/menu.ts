// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/menu.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../google/protobuf/empty";

export const protobufPackage = "menue";

/** Menue entity */
export interface Menue {
  id: string;
  foodName: string;
  restaurantID: string;
  description: string;
  imageReference: string;
  price: number;
  category: string;
  isAvailable: boolean;
}

/** Request to create a new menue */
export interface CreateMenueRequest {
  foodName: string;
  restaurantID: string;
  description: string;
  imageReference: string;
  price: number;
  category: string;
  isAvailable: boolean;
}

/** Request to update an existing menue */
export interface UpdateMenueRequest {
  id: string;
  foodName: string;
  restaurantID: string;
  description: string;
  imageReference: string;
  price: number;
  category: string;
  isAvailable: boolean;
}

/** ID wrapper */
export interface Id {
  id: string;
}

/** List of menues */
export interface MenueList {
  items: Menue[];
}

export const MENUE_PACKAGE_NAME = "menue";

/** The Menue service definition */

export interface MenueServiceClient {
  createMenue(request: CreateMenueRequest): Observable<Menue>;

  getMenue(request: Id): Observable<Menue>;

  getAllMenues(request: Empty): Observable<MenueList>;

  updateMenue(request: UpdateMenueRequest): Observable<Menue>;

  deleteMenue(request: Id): Observable<Empty>;
}

/** The Menue service definition */

export interface MenueServiceController {
  createMenue(request: CreateMenueRequest): Promise<Menue> | Observable<Menue> | Menue;

  getMenue(request: Id): Promise<Menue> | Observable<Menue> | Menue;

  getAllMenues(request: Empty): Promise<MenueList> | Observable<MenueList> | MenueList;

  updateMenue(request: UpdateMenueRequest): Promise<Menue> | Observable<Menue> | Menue;

  deleteMenue(request: Id): void;
}

export function MenueServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createMenue", "getMenue", "getAllMenues", "updateMenue", "deleteMenue"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("MenueService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("MenueService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const MENUE_SERVICE_NAME = "MenueService";
