// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: proto/restaurant.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../google/protobuf/empty";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "restaurant";

/** Common Messages */
export interface RestaurantId {
  restaurantId: string;
}

export interface RestaurantResponse {
  restaurant: Restaurant | undefined;
}

export interface NameRequest {
  name: string;
}

export interface CuisineRequest {
  cuisine: string;
}

export interface UserIdRequest {
  userId: string;
}

export interface RatingRequest {
  rating: number;
}

export interface Coordinates {
  longitude: number;
  latitude: number;
}

export interface LocationRequest {
  latitude: number;
  longitude: number;
  /** in kilometers */
  radius: number;
}

/** Restaurant Data */
export interface Restaurant {
  restaurantId: string;
  userId: string;
  name: string;
  address: string;
  location: Coordinates | undefined;
  phone: string;
  cuisineType: string;
  description: string;
  openHours: string;
  imageReference: string;
  numberOfRatings: number;
  isOpen: boolean;
  isVerified: boolean;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface CreateRestaurantRequest {
  userId: string;
  name: string;
  address: string;
  location: Coordinates | undefined;
  phone: string;
  cuisineType: string;
  description: string;
  openHours: string;
  imageReference: string;
}

export interface UpdateRestaurantRequest {
  restaurantId: string;
  name: string;
  address: string;
  location: Coordinates | undefined;
  phone: string;
  cuisineType: string;
  description: string;
  openHours: string;
  imageReference: string;
  isOpen: boolean;
  isVerified: boolean;
}

export interface RestaurantList {
  restaurants: Restaurant[];
}

export interface UpdateIsVerifiedRequest {
  restaurantId: string;
  isVerified: boolean;
}

export interface UpdateIsOpenRequest {
  restaurantId: string;
  isOpen: boolean;
}

export const RESTAURANT_PACKAGE_NAME = "restaurant";

export interface RestaurantServiceClient {
  createRestaurant(request: CreateRestaurantRequest): Observable<Restaurant>;

  getRestaurant(request: RestaurantId): Observable<Restaurant>;

  getAllRestaurants(request: Empty): Observable<RestaurantList>;

  updateRestaurant(request: UpdateRestaurantRequest): Observable<Restaurant>;

  deleteRestaurant(request: RestaurantId): Observable<Empty>;

  getRestaurantByName(request: NameRequest): Observable<Restaurant>;

  getRestaurantsByCuisine(request: CuisineRequest): Observable<RestaurantList>;

  getRestaurantsByUserId(request: UserIdRequest): Observable<RestaurantList>;

  updateIsVerified(request: UpdateIsVerifiedRequest): Observable<RestaurantResponse>;

  updateIsOpen(request: UpdateIsOpenRequest): Observable<RestaurantResponse>;

  getRestaurantsByRating(request: RatingRequest): Observable<RestaurantList>;

  getRestaurantsByLocation(request: LocationRequest): Observable<RestaurantList>;

  getAllRestaurantsWithFilters(request: Empty): Observable<RestaurantList>;
}

export interface RestaurantServiceController {
  createRestaurant(request: CreateRestaurantRequest): Promise<Restaurant> | Observable<Restaurant> | Restaurant;

  getRestaurant(request: RestaurantId): Promise<Restaurant> | Observable<Restaurant> | Restaurant;

  getAllRestaurants(request: Empty): Promise<RestaurantList> | Observable<RestaurantList> | RestaurantList;

  updateRestaurant(request: UpdateRestaurantRequest): Promise<Restaurant> | Observable<Restaurant> | Restaurant;

  deleteRestaurant(request: RestaurantId): void;

  getRestaurantByName(request: NameRequest): Promise<Restaurant> | Observable<Restaurant> | Restaurant;

  getRestaurantsByCuisine(
    request: CuisineRequest,
  ): Promise<RestaurantList> | Observable<RestaurantList> | RestaurantList;

  getRestaurantsByUserId(request: UserIdRequest): Promise<RestaurantList> | Observable<RestaurantList> | RestaurantList;

  updateIsVerified(
    request: UpdateIsVerifiedRequest,
  ): Promise<RestaurantResponse> | Observable<RestaurantResponse> | RestaurantResponse;

  updateIsOpen(
    request: UpdateIsOpenRequest,
  ): Promise<RestaurantResponse> | Observable<RestaurantResponse> | RestaurantResponse;

  getRestaurantsByRating(request: RatingRequest): Promise<RestaurantList> | Observable<RestaurantList> | RestaurantList;

  getRestaurantsByLocation(
    request: LocationRequest,
  ): Promise<RestaurantList> | Observable<RestaurantList> | RestaurantList;

  getAllRestaurantsWithFilters(request: Empty): Promise<RestaurantList> | Observable<RestaurantList> | RestaurantList;
}

export function RestaurantServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createRestaurant",
      "getRestaurant",
      "getAllRestaurants",
      "updateRestaurant",
      "deleteRestaurant",
      "getRestaurantByName",
      "getRestaurantsByCuisine",
      "getRestaurantsByUserId",
      "updateIsVerified",
      "updateIsOpen",
      "getRestaurantsByRating",
      "getRestaurantsByLocation",
      "getAllRestaurantsWithFilters",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RestaurantService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RestaurantService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const RESTAURANT_SERVICE_NAME = "RestaurantService";
